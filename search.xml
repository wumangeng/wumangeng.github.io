<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/10/14/hello-world/"/>
      <url>/2021/10/14/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JWT的使用姿势</title>
      <link href="/2021/02/25/jwt/"/>
      <url>/2021/02/25/jwt/</url>
      
        <content type="html"><![CDATA[<h2 id="JWT简介"><a href="#JWT简介" class="headerlink" title="JWT简介"></a>JWT简介</h2><blockquote><p>JWT(Json Web Token)，基于token的用户认证原理：让用户输入账号和密码，认证通过后获得一个token（令牌），在token有效期里用户可以带着token访问特定资源。<br> 开始token并没有一个统一标准，大家都各自使用自己的方案。后来出现了JWT(Json Web Token)这个标准。<br> JWT本质上是一个对JSON对象加密后的字符串。当服务器认证用户通过后，一个包含用户信息的json对象被加密后返回给用户，</p><p>json 对象：</p></blockquote><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"expire"</span><span class="token operator">:</span> <span class="token string">"2019-11-29 20:19:00"</span><span class="token punctuation">,</span>    <span class="token property">"permissions"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token string">"sys:user:list"</span><span class="token punctuation">,</span>        <span class="token string">"sys:dept:list"</span><span class="token punctuation">,</span>        <span class="token string">"sys:role:list"</span>   <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"role"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token string">"dev"</span>   <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"userName"</span><span class="token operator">:</span> <span class="token string">"dev123"</span><span class="token punctuation">}</span></code></pre><p>之后，用户访问服务器时，都要返回这个json对象。服务器只靠这个对象就可以识别用户身份，不需要再去查数据库。为了防止用户篡改数据，服务器在生成对象时将添加一个签名。<br> 服务器不保存任何会话数据，也就是说，服务器变得<strong>无状态</strong>，从而更容易扩展。</p><h2 id="JWT-怎么用"><a href="#JWT-怎么用" class="headerlink" title="JWT 怎么用"></a>JWT 怎么用</h2><p>以浏览器接收到服务器发过来的jwt后，可以存储在Cookie 或 localStorage 中。之后，浏览器每次与服务器通信时都会带上JWT。可以将JWT放在Cookie中，会自动发送（不跨域），或将JWT放在HTTP请求头的授权字段中。</p><pre class=" language-xml"><code class="language-xml">Authorization: Bearer <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>token</span><span class="token punctuation">></span></span></code></pre><p>也可放在url中，或POST请求的数据体中。</p><h2 id="JWT-结构"><a href="#JWT-结构" class="headerlink" title="JWT 结构"></a>JWT 结构</h2><p>jwt有3个组成部分，每部分通过点号来分割 header.payload.signature</p><ul><li>头部（header) 是一个 JSON 对象</li><li>载荷（payload) 是一个 JSON 对象，用来存放实际需要传递的数据</li><li>签名（signature) 对header和payload使用密钥进行签名，防止数据篡改。</li></ul><h4 id="头部-header"><a href="#头部-header" class="headerlink" title="头部 header"></a>头部 header</h4><p>Jwt的头部是一个JSON,然后使用Base64URL编码，承载两部分信息：</p><ul><li>声明类型typ，表示这个令牌（token）的类型（type），JWT令牌统一写为JWT</li><li>声明加密的算法alg，通常直接使用HMACSHA256，就是HS256了，也可以使用RSA,支持很多算(HS256、HS384、HS512、RS256、RS384、RS512、ES256、ES384、ES512、PS256、PS384)</li></ul><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"alg"</span><span class="token operator">:</span> <span class="token string">"HS256"</span><span class="token punctuation">,</span>  <span class="token property">"typ"</span><span class="token operator">:</span> <span class="token string">"JWT"</span><span class="token punctuation">}</span></code></pre><ul><li>Base64URL 编码后(Base64编码后可能出现字符+和/，在URL中不能直接作为参数，Base64URL就是把字符+和/分别变成-和 _。JWT有可能放在url中，所以要用Base64URL编码。）</li></ul><pre class=" language-tex"><code class="language-tex">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9</code></pre><h4 id="载荷-payload"><a href="#载荷-payload" class="headerlink" title="载荷 payload"></a>载荷 payload</h4><p>payload也是一个JSON字符串，是承载消息具体内容的地方，也需要使用Base64URL编码，就是存储我们要保存到客户端的信息，一般都是包含用户的基本信息，权限信息，时间戳等信息。<br> JWT指定了一些官方字段（claims）备用:</p><ul><li>iss: 签发人</li><li>exp: 过期时间</li><li>iat: 签发时间</li><li>nbf: 生效时间</li><li>jti: 编号</li><li>sub: 主题</li><li>aud: 受众</li></ul><p>除了官方字段，在这个部分还可以添加私有字段，例如：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"sub"</span><span class="token operator">:</span> <span class="token string">"1dfaafa7-fddf-46f2-b3d8-11bfe9ac7230"</span><span class="token punctuation">,</span>  <span class="token property">"jwt-roles-key_"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">"普通用户角色"</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"iss"</span><span class="token operator">:</span> <span class="token string">"yingxue.com"</span><span class="token punctuation">,</span>  <span class="token property">"jwt-permissions-key"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">"sys:user:list"</span><span class="token punctuation">,</span>    <span class="token string">"sys:dept:list"</span><span class="token punctuation">,</span>    <span class="token string">"sys:role:list"</span><span class="token punctuation">,</span>    <span class="token string">"sys:permission:list"</span><span class="token punctuation">,</span>    <span class="token string">"sys:log:list"</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"jwt-user-name-key"</span><span class="token operator">:</span> <span class="token string">"dev123"</span><span class="token punctuation">,</span>  <span class="token property">"exp"</span><span class="token operator">:</span> <span class="token number">1575005723</span><span class="token punctuation">,</span>  <span class="token property">"iat"</span><span class="token operator">:</span> <span class="token number">1574998523</span><span class="token punctuation">}</span></code></pre><p>Base64URL编码的后：</p><pre class=" language-undefined"><code class="language-undefined">eyJzdWIiOiIxZGZhYWZhNy1mZGRmLTQ2ZjItYjNkOC0xMWJmZTlhYzcyMzAiLCJqd3Qtcm9sZXMta2V5XyI6WyLmma7pgJrnlKjmiLfop5LoibIiXSwiaXNzIjoieWluZ3h1ZS5jb20iLCJqd3QtcGVybWlzc2lvbnMta2V5IjpbInN5czp1c2VyOmxpc3QiLCJzeXM6ZGVwdDpsaXN0Iiwic3lzOnJvbGU6bGlzdCIsInN5czpwZXJtaXNzaW9uOmxpc3QiLCJzeXM6bG9nOmxpc3QiXSwiand0LXVzZXItbmFtZS1rZXkiOiJkZXYxMjMiLCJleHAiOjE1NzUwMDU3MjMsImlhdCI6MTU3NDk5ODUyM30</code></pre><h4 id="签名-Signature"><a href="#签名-Signature" class="headerlink" title="签名 Signature"></a>签名 Signature</h4><p>Signature部分是对前两部分的防篡改签名。将Header和Payload用Base64URL编码后，再用点(.)连接起来。然后使用签名算法和密钥对这个字符串进行签名：</p><pre class=" language-bash"><code class="language-bash">signature <span class="token operator">=</span> HMACSHA256<span class="token punctuation">(</span>header + <span class="token string">"."</span> + payload, secret<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>首先，需要指定一个密码（secret）。该密码保存在服务器中，并且不能向用户公开。然后，使用标头中指定的签名算法根据以下公式生成签名。signature = HMACSHA256(header + “.” + payload, secret);  在计算出签名哈希后，JWT头，有效载荷和签名哈希的三个部分组合成一个字符串，每个部分用”.”分隔，就构成整个JWT对象。  以上三部分都是在服务器定义，当用户登陆成功后，根据用户信息，按照jwt规则生成token返回给客户端。<br> 签名信息：</p><pre class=" language-undefined"><code class="language-undefined">qYWHdAbYZlP6akHTrDm-MkIWia8mPW-TO75eu8r0-Vk</code></pre><p><strong>组合在一起</strong><br> 3部分组合在一起，构成了完整的jwt：</p><pre class=" language-css"><code class="language-css">eyJhbGciOiJIUzI<span class="token number">1</span>NiJ<span class="token number">9.</span>eyJzdWIiOiIxZGZhYWZhNy<span class="token number">1</span>mZGRmLTQ<span class="token number">2</span>ZjItYjNkOC<span class="token number">0</span>xMWJmZTlhYzcyMzAiLCJqd<span class="token number">3</span>Qtcm<span class="token number">9</span>sZXMta<span class="token number">2</span>V<span class="token number">5</span>XyI<span class="token number">6</span>WyLmma<span class="token number">7</span>pgJrnlKjmiLfop<span class="token number">5</span>LoibIiXSwiaXNzIjoieWluZ<span class="token number">3</span>h<span class="token number">1</span>ZS<span class="token number">5</span>jb<span class="token number">20</span>iLCJqd<span class="token number">3</span>QtcGVybWlzc<span class="token number">2</span>lvbnMta<span class="token number">2</span>V<span class="token number">5</span>IjpbInN<span class="token number">5</span>czp<span class="token number">1</span>c<span class="token number">2</span>VyOmxpc<span class="token number">3</span>QiLCJzeXM<span class="token number">6</span>ZGVwdDpsaXN<span class="token number">0</span>Iiwic<span class="token number">3</span>lzOnJvbGU<span class="token number">6</span>bGlzdCIsInN<span class="token number">5</span>czpwZXJtaXNzaW<span class="token number">9</span>uOmxpc<span class="token number">3</span>QiLCJzeXM<span class="token number">6</span>bG<span class="token number">9</span>nOmxpc<span class="token number">3</span>QiXSwiand<span class="token number">0</span>LXVzZXItbmFtZS<span class="token number">1</span>rZXkiOiJkZXYxMjMiLCJleHAiOjE<span class="token number">1</span>NzUwMDU<span class="token number">3</span>MjMsImlhdCI<span class="token number">6</span>MTU<span class="token number">3</span>NDk<span class="token number">5</span>ODUyM<span class="token number">30.</span>qYWHdAbYZlP<span class="token number">6</span>akHTrDm�MkIWia<span class="token number">8</span>mPW-TO<span class="token number">75</span>eu<span class="token number">8</span>r<span class="token number">0</span>-Vk</code></pre><h2 id="使用要点"><a href="#使用要点" class="headerlink" title="使用要点"></a>使用要点</h2><ul><li>JWT默认是不加密的，但也可以加密，不加密时不宜在jwt中存放敏感信息</li><li>不要泄露签名密钥(secret)</li><li>jwt签发后无法撤回，有效期不宜太长</li><li>JWT 泄露会被人冒用身份，为防止盗用，JWT应尽量使用 https 协议传输</li></ul><h2 id="JWT-使用姿势"><a href="#JWT-使用姿势" class="headerlink" title="JWT 使用姿势"></a>JWT 使用姿势</h2><blockquote><p>大家有没有发现，现在的网站通常第一次登录验证通过后，在后续的操作都不需要用户名密码，那后端怎么确定这次访问的用户是合法用户呢？</p><p>其实当第一次登录后，服务器生成一个Token 便将此 Token 返回给客户端，以后客户端只需带上这个 Token 前来请求数据即可，无需再次带上用户名和密码。<br> 那么我们后端该怎么实现上述的业务呢？</p></blockquote><h3 id="1-有状态-token"><a href="#1-有状态-token" class="headerlink" title="1. 有状态 token"></a>1. 有状态 token</h3><p>所谓的有状态就是 把生成的 token 保存在服务器端。<br> 实现步骤：</p><ul><li>当用户登录进来后端生成一个随机数 token(我通常用uuid) 然后把 token 做key userId 做为 value 存入 reids 并且设置失效时间。</li><li>编写一个拦截器，设置要拦截的 api(即是受保护的api)和开放的api(用户登录、注册等接口)。 去 header 或者 cookie 拿 token，如果 token 为空或者 token 已经失效(拿 token 去 redis 检测是否失效)则告知客户端<br> 引导到登录页面。</li></ul><h3 id="2-无状态-token"><a href="#2-无状态-token" class="headerlink" title="2. 无状态 token"></a>2. 无状态 token</h3><p>所谓的无状态 token 就是服务器不保存 token 信息，当用户登陆成功后，返回 token 给客户端，客户端保存起来每次请求都会带过来。其实我们用 token 的作用就是拿到用户ID 只有拿到了 ID 才能区别是哪个用户访问，那么 JWT 刚刚好满足要求，JWT是签发给客户端而且 用户 ID 直接存在 JWT 里面，客户端每次请求过来的时候我们直接解析 JWT 拿到用户 ID，这样就达到了识别用户的效果。<br> 但是在使用 JWT 的时候都会遇到下列的烦恼？<br> <strong>无法作废已颁布的令牌。</strong>所有的认证信息都在 JWT 中，由于在服务端没有状态，即使你知道了某个 JWT 被盗取了，你也没有办法将其作废。在 JWT 过期之前（你绝对应该设置过期时间），你无能为力。<br> <strong>不易应对数据过期。</strong>与上一条类似，JWT 有点类似缓存，由于无法作废已颁布的令牌，在其过期前，你只能忍受“过期”的数据。</p><h3 id="我的使用姿势："><a href="#我的使用姿势：" class="headerlink" title="我的使用姿势："></a>我的使用姿势：</h3><ul><li>用户登录进来，会生产两个 token (一个过期时间比较短的 access_token ,一个过期时间比较长的 refresh_token )，创建一个拦截器拦截用户请求。</li><li>当要更新jwt携带的数据时候，直接用refresh_token 刷新 access_token,而老的access_token 用redis 标记起来并设置过期时间(过期时间为该令牌剩余的过期时间)</li><li>当要作废令牌的时候，直接把这个令牌在redis 标记起来，并且设置过期时间(过期时间为该令牌剩余的过期时间)。</li></ul><h2 id="JWT-工具类封装"><a href="#JWT-工具类封装" class="headerlink" title="JWT 工具类封装"></a>JWT 工具类封装</h2><p>我们在日常开发中会多次去验证客户端传入的 token，所以我们要把验证的方法抽出来，封装成一个工具类，每次直接用工具类调用就可以了</p><h5 id="首先创建一个-JwtTokenUtil"><a href="#首先创建一个-JwtTokenUtil" class="headerlink" title="首先创建一个 JwtTokenUtil"></a>首先创建一个 JwtTokenUtil</h5><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JwtTokenUtil</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><h5 id="application-yml-加入-JWT-相关配置参数"><a href="#application-yml-加入-JWT-相关配置参数" class="headerlink" title="application.yml 加入 JWT 相关配置参数"></a>application.yml 加入 JWT 相关配置参数</h5><pre class=" language-yml"><code class="language-yml">#JWT 密钥jwt: secretKey: 78944878877848fg) accessTokenExpireTime: PT2H refreshTokenExpireTime: PT8H refreshTokenExpireAppTime: P30D issuer: ggk.com</code></pre><h5 id="创建配置读取类"><a href="#创建配置读取类" class="headerlink" title="创建配置读取类"></a>创建配置读取类</h5><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"jwt"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TokenSettings</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String secretKey<span class="token punctuation">;</span>    <span class="token keyword">private</span> Duration accessTokenExpireTime<span class="token punctuation">;</span>    <span class="token keyword">private</span> Duration refreshTokenExpireTime<span class="token punctuation">;</span>    <span class="token keyword">private</span> Duration refreshTokenExpireAppTime<span class="token punctuation">;</span>    <span class="token keyword">private</span> String  issuer<span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><h5 id="创建初始化配置代理类"><a href="#创建初始化配置代理类" class="headerlink" title="创建初始化配置代理类"></a>创建初始化配置代理类</h5><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InitializerUtil</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> TokenSettings tokenSettings<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">InitializerUtil</span><span class="token punctuation">(</span>TokenSettings tokenSettings<span class="token punctuation">)</span> <span class="token punctuation">{</span>        JwtTokenUtil<span class="token punctuation">.</span><span class="token function">setTokenSettings</span><span class="token punctuation">(</span>tokenSettings<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="修改JwtTokenUtil加入签发-token-方法"><a href="#修改JwtTokenUtil加入签发-token-方法" class="headerlink" title="修改JwtTokenUtil加入签发 token 方法"></a>修改JwtTokenUtil加入签发 token 方法</h5><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JwtTokenUtil</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String secretKey<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Duration accessTokenExpireTime<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Duration refreshTokenExpireTime<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Duration refreshTokenExpireAppTime<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String issuer<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setTokenSettings</span><span class="token punctuation">(</span>TokenSettings tokenSettings<span class="token punctuation">)</span><span class="token punctuation">{</span>        secretKey<span class="token operator">=</span>tokenSettings<span class="token punctuation">.</span><span class="token function">getSecretKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        accessTokenExpireTime<span class="token operator">=</span>tokenSettings<span class="token punctuation">.</span><span class="token function">getAccessTokenExpireTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        refreshTokenExpireTime<span class="token operator">=</span>tokenSettings<span class="token punctuation">.</span><span class="token function">getRefreshTokenExpireTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        refreshTokenExpireAppTime<span class="token operator">=</span>tokenSettings<span class="token punctuation">.</span><span class="token function">getRefreshTokenExpireAppTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        issuer<span class="token operator">=</span>tokenSettings<span class="token punctuation">.</span><span class="token function">getIssuer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 签发/生成token     * issuer 签发人     * subject 代表这个JWT的主体，即他的所有人，一般是用户ID     * claims 储存在jwt里的信息(键值对)，一般是放些用户的权限/角色信息     * ttlMillis 有效时间(毫秒)     * secret 密钥     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">generateToken</span><span class="token punctuation">(</span>String issuer<span class="token punctuation">,</span> String subject<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> claims<span class="token punctuation">,</span> <span class="token keyword">long</span> ttlMillis<span class="token punctuation">,</span> String secret<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//加密方式</span>        SignatureAlgorithm signatureAlgorithm <span class="token operator">=</span> SignatureAlgorithm<span class="token punctuation">.</span>HS256<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//当前时间戳，并转为日期</span>        <span class="token keyword">long</span> nowMillis <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Date now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>nowMillis<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//String printBase64Binary(byte[])就是将字节数组做base64编码，byte[] parseBase64Binary(String) 就是将Base64编码后的String还原成字节数组。</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> signingKey <span class="token operator">=</span> DatatypeConverter<span class="token punctuation">.</span><span class="token function">parseBase64Binary</span><span class="token punctuation">(</span>secret<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//这里其实就是new一个JwtBuilder，设置jwt的body</span>        JwtBuilder builder <span class="token operator">=</span> Jwts<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//如果claims不为空，就加到JWT的载荷里面去</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>null<span class="token operator">!=</span>claims<span class="token punctuation">)</span><span class="token punctuation">{</span>            builder<span class="token punctuation">.</span><span class="token function">setClaims</span><span class="token punctuation">(</span>claims<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>subject<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            builder<span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span>subject<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>issuer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            builder<span class="token punctuation">.</span><span class="token function">setIssuer</span><span class="token punctuation">(</span>issuer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//签发时间</span>        builder<span class="token punctuation">.</span><span class="token function">setIssuedAt</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ttlMillis <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">long</span> expMillis <span class="token operator">=</span> nowMillis <span class="token operator">+</span> ttlMillis<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//过期时间</span>            Date exp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>expMillis<span class="token punctuation">)</span><span class="token punctuation">;</span>            builder<span class="token punctuation">.</span><span class="token function">setExpiration</span><span class="token punctuation">(</span>exp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        builder<span class="token punctuation">.</span><span class="token function">signWith</span><span class="token punctuation">(</span>signatureAlgorithm<span class="token punctuation">,</span> signingKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">compact</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 刷新token和业务token 只是过期时间不一样</span>    <span class="token comment" spellcheck="true">/**     * 生成 access_token   正常请求资源时携带的凭证     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getAccessToken</span><span class="token punctuation">(</span>String subject<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> claims<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">generateToken</span><span class="token punctuation">(</span>issuer<span class="token punctuation">,</span>subject<span class="token punctuation">,</span>claims<span class="token punctuation">,</span>accessTokenExpireTime<span class="token punctuation">.</span><span class="token function">toMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>secretKey<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 生产 PC refresh_token     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getRefreshToken</span><span class="token punctuation">(</span>String subject<span class="token punctuation">,</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> claims<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">generateToken</span><span class="token punctuation">(</span>issuer<span class="token punctuation">,</span>subject<span class="token punctuation">,</span>claims<span class="token punctuation">,</span>refreshTokenExpireTime<span class="token punctuation">.</span><span class="token function">toMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>secretKey<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 生产 App端 refresh_token     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getRefreshAppToken</span><span class="token punctuation">(</span>String subject<span class="token punctuation">,</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> claims<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">generateToken</span><span class="token punctuation">(</span>issuer<span class="token punctuation">,</span>subject<span class="token punctuation">,</span>claims<span class="token punctuation">,</span>refreshTokenExpireAppTime<span class="token punctuation">.</span><span class="token function">toMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>secretKey<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 解析令牌 获取数据声明     * 拿到用户及用户的角色、权限等信息     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Claims <span class="token function">getClaimsFromToken</span><span class="token punctuation">(</span>String token<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Claims claims<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//用密钥(必字节数组)解析jwt，获取body（有效载荷）</span>            claims <span class="token operator">=</span> Jwts<span class="token punctuation">.</span><span class="token function">parser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setSigningKey</span><span class="token punctuation">(</span>DatatypeConverter<span class="token punctuation">.</span><span class="token function">parseBase64Binary</span><span class="token punctuation">(</span>secretKey<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parseClaimsJws</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//解析不了，这个token就是无效的</span>            claims <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> claims<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取用户id     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getUserId</span><span class="token punctuation">(</span>String token<span class="token punctuation">)</span><span class="token punctuation">{</span>        String userId<span class="token operator">=</span>null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Claims claims <span class="token operator">=</span> <span class="token function">getClaimsFromToken</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>            userId <span class="token operator">=</span> claims<span class="token punctuation">.</span><span class="token function">getSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"error={}"</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> userId<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取用户名     * 用于首页展示     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getUserName</span><span class="token punctuation">(</span>String token<span class="token punctuation">)</span><span class="token punctuation">{</span>        String username<span class="token operator">=</span>null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//解析token获取claims</span>            Claims claims <span class="token operator">=</span> <span class="token function">getClaimsFromToken</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//claims中的key当作自定义的常量</span>            username <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> claims <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Constant<span class="token punctuation">.</span>JWT_USER_NAME<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"error={}"</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> username<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 验证token 是否过期     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Boolean <span class="token function">isTokenExpired</span><span class="token punctuation">(</span>String token<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//首先解析，如果能解析成功，证明我服务器签发的</span>            Claims claims <span class="token operator">=</span> <span class="token function">getClaimsFromToken</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>            Date expiration <span class="token operator">=</span> claims<span class="token punctuation">.</span><span class="token function">getExpiration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//过期时间和当前时间比较，如果过期时间在当前时间之前，返回true，表示已过期；否则返回false，没过期</span>            <span class="token keyword">return</span> expiration<span class="token punctuation">.</span><span class="token function">before</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"error={}"</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//解析失败，抛出异常，返回true，表示已过期</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 校验令牌     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Boolean <span class="token function">validateToken</span><span class="token punctuation">(</span>String token<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Claims claimsFromToken <span class="token operator">=</span> <span class="token function">getClaimsFromToken</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>null<span class="token operator">!=</span>claimsFromToken <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isTokenExpired</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 刷新token     * 如果是过期刷新，claims/载荷 不变；     * 如果主动刷新，claims/载荷 改变【一般是权限/角色改变的时候去主动刷新】     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">refreshToken</span><span class="token punctuation">(</span>String refreshToken<span class="token punctuation">,</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> claims<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String refreshedToken<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Claims parserclaims <span class="token operator">=</span> <span class="token function">getClaimsFromToken</span><span class="token punctuation">(</span>refreshToken<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/**             * 如果传入的claims为空，说明是过期刷新，原先的用户信息不变，claims引用上个token里的内容             */</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>null<span class="token operator">==</span>claims<span class="token punctuation">)</span><span class="token punctuation">{</span>                claims<span class="token operator">=</span>parserclaims<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">/**             * 不为空，根据传入的claims【用户信息】，生成新的Token             */</span>            refreshedToken <span class="token operator">=</span> <span class="token function">generateToken</span><span class="token punctuation">(</span>parserclaims<span class="token punctuation">.</span><span class="token function">getIssuer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>parserclaims<span class="token punctuation">.</span><span class="token function">getSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>claims<span class="token punctuation">,</span>accessTokenExpireTime<span class="token punctuation">.</span><span class="token function">toMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>secretKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            refreshedToken <span class="token operator">=</span> null<span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"error={}"</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> refreshedToken<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取token的剩余过期时间     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">getRemainingTime</span><span class="token punctuation">(</span>String token<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">long</span> result<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">long</span> nowMillis <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            result<span class="token operator">=</span> <span class="token function">getClaimsFromToken</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getExpiration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>nowMillis<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"error={}"</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="JwtTokenUtil"><a href="#JwtTokenUtil" class="headerlink" title="JwtTokenUtil"></a>JwtTokenUtil</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> io<span class="token punctuation">.</span>jsonwebtoken<span class="token punctuation">.</span>Claims<span class="token punctuation">;</span><span class="token keyword">import</span> io<span class="token punctuation">.</span>jsonwebtoken<span class="token punctuation">.</span>Jwts<span class="token punctuation">;</span><span class="token keyword">import</span> io<span class="token punctuation">.</span>jsonwebtoken<span class="token punctuation">.</span>SignatureAlgorithm<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Logger<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>LoggerFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Value<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>core<span class="token punctuation">.</span>userdetails<span class="token punctuation">.</span>UserDetails<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * JwtToken生成的工具类 * JWT token的格式：header.payload.signature * header的格式（算法、token的类型）： * {"alg": "HS512","type": "JWT"} * payload的格式（用户名、创建时间、生成时间）： * {"sub":"wang","created":1489079981393,"exp":1489684781} * signature的生成算法： * HMACSHA512(base64UrlEncode(header) + "." +base64UrlEncode(payload),secret) */</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JwtTokenUtil</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger LOGGER <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>JwtTokenUtil<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String CLAIM_KEY_USERNAME <span class="token operator">=</span> <span class="token string">"sub"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String CLAIM_KEY_CREATED <span class="token operator">=</span> <span class="token string">"created"</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${jwt.secret}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String secret<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${jwt.expiration}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Long expiration<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 根据负责生成JWT的token     */</span>    <span class="token keyword">private</span> String <span class="token function">generateToken</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> claims<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Jwts<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setClaims</span><span class="token punctuation">(</span>claims<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setExpiration</span><span class="token punctuation">(</span><span class="token function">generateExpirationDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">signWith</span><span class="token punctuation">(</span>SignatureAlgorithm<span class="token punctuation">.</span>HS512<span class="token punctuation">,</span> secret<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">compact</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 从token中获取JWT中的负载     */</span>    <span class="token keyword">private</span> Claims <span class="token function">getClaimsFromToken</span><span class="token punctuation">(</span>String token<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Claims claims <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            claims <span class="token operator">=</span> Jwts<span class="token punctuation">.</span><span class="token function">parser</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">setSigningKey</span><span class="token punctuation">(</span>secret<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">parseClaimsJws</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            LOGGER<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"JWT格式验证失败:{}"</span><span class="token punctuation">,</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> claims<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 生成token的过期时间     */</span>    <span class="token keyword">private</span> Date <span class="token function">generateExpirationDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> expiration <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 从token中获取登录用户名     */</span>    <span class="token keyword">public</span> String <span class="token function">getUserNameFromToken</span><span class="token punctuation">(</span>String token<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String username<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Claims claims <span class="token operator">=</span> <span class="token function">getClaimsFromToken</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>            username <span class="token operator">=</span>  claims<span class="token punctuation">.</span><span class="token function">getSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            username <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> username<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 验证token是否还有效     * @param token       客户端传入的token     * @param userDetails 从数据库中查询出来的用户信息     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">validateToken</span><span class="token punctuation">(</span>String token<span class="token punctuation">,</span> UserDetails userDetails<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String username <span class="token operator">=</span> <span class="token function">getUserNameFromToken</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> username<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>userDetails<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isTokenExpired</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 判断token是否已经失效     */</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">isTokenExpired</span><span class="token punctuation">(</span>String token<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Date expiredDate <span class="token operator">=</span> <span class="token function">getExpiredDateFromToken</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> expiredDate<span class="token punctuation">.</span><span class="token function">before</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 从token中获取过期时间     */</span>    <span class="token keyword">private</span> Date <span class="token function">getExpiredDateFromToken</span><span class="token punctuation">(</span>String token<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Claims claims <span class="token operator">=</span> <span class="token function">getClaimsFromToken</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> claims<span class="token punctuation">.</span><span class="token function">getExpiration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 根据用户信息生成token     */</span>    <span class="token keyword">public</span> String <span class="token function">generateToken</span><span class="token punctuation">(</span>UserDetails userDetails<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> claims <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        claims<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>CLAIM_KEY_USERNAME<span class="token punctuation">,</span> userDetails<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        claims<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>CLAIM_KEY_CREATED<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">generateToken</span><span class="token punctuation">(</span>claims<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 判断token是否可以被刷新     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">canRefresh</span><span class="token punctuation">(</span>String token<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">!</span><span class="token function">isTokenExpired</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 刷新token     */</span>    <span class="token keyword">public</span> String <span class="token function">refreshToken</span><span class="token punctuation">(</span>String token<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Claims claims <span class="token operator">=</span> <span class="token function">getClaimsFromToken</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>        claims<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>CLAIM_KEY_CREATED<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">generateToken</span><span class="token punctuation">(</span>claims<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jwt </tag>
            
            <tag> token </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
